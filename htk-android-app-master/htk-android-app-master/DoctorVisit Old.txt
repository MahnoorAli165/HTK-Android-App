/**
In this class, the app use to display a blue location marker on current location button click
*/



package com.htk.consumerapp;

import android.Manifest;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import com.google.android.gms.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.FragmentActivity;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;


public class DoctorVisit extends FragmentActivity implements View.OnClickListener, RadioGroup.OnCheckedChangeListener, OnMapReadyCallback, LocationListener {

    private EditText appointmentDateText, appointmentTimeText, conditionText, specialText;
    private String appointment_date, appointment_time, checkedRadio, condition, specialnote, customer_id, appointment_id = "";
    private RadioGroup radioGroup;
    private CheckBox checkBox;
    private Button addButton, locationButton, confirmLocationButton;
    private ConstraintLayout layout;
    private boolean checked = false;
    private ProgressBar progressBar;
    private final String TAG = "Doctor Visit";
    private String Uid, new_appointment_id = "";
    private int count = 0, appointments_count = 0;
    private TextView locationLabel;

    //location
    GoogleMap mGoogleMap;
    SupportMapFragment mapFrag;
    LocationRequest mLocationRequest;
    Location mLastLocation;
    Marker mCurrLocationMarker;
    FusedLocationProviderClient mFusedLocationClient;
    private double latitude, longitude = 0;
    private boolean isMapDisplayed = false;
    private boolean mLocationPermissionGranted = false;
    Location location;
    LocationListener locationListener;
    LatLng pos;
    LocationManager locationManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_doctor_visit);

        disableAutoLoadingOfKeyboard();
        initializViews();
        setListeners();

        customer_id = "htk-uae-001";
        Intent intent = getIntent();
        Uid = intent.getStringExtra("id");

        if (ActivityCompat.checkSelfPermission(DoctorVisit.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(DoctorVisit.this, Manifest.permission.ACCESS_COARSE_LOCATION ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(DoctorVisit.this, Manifest.permission.READ_EXTERNAL_STORAGE ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(DoctorVisit.this, Manifest.permission.WRITE_EXTERNAL_STORAGE ) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(DoctorVisit.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }

        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        mapFrag = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map1);
        mapFrag.getMapAsync(this);

        displayGoogleMap(0);


    }

    public void initializViews(){
        appointmentDateText = findViewById(R.id.appointmentDateD);
        appointmentTimeText = findViewById(R.id.appointmentTimeD);
        conditionText = findViewById(R.id.doctorConditionText);
        specialText = findViewById(R.id.doctorSpecialText);
        radioGroup = findViewById(R.id.doctorRadiogroup);
        checkBox = findViewById(R.id.doctorCheckbox);
        addButton = findViewById(R.id.doctorButton);
        progressBar = findViewById(R.id.progressBar5);
        layout = findViewById(R.id.doctorLayout);
        locationLabel = findViewById(R.id.locationLabel);
        locationButton = findViewById(R.id.locationButton);
        confirmLocationButton = findViewById(R.id.confirmLocationButtonD);
    }

    public void disableAutoLoadingOfKeyboard(){
        getWindow().setSoftInputMode(
                WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN
        );
    }

    public void setListeners(){
        appointmentDateText.setOnClickListener(this);
        appointmentTimeText.setOnClickListener(this);
        radioGroup.setOnCheckedChangeListener(this);
        addButton.setOnClickListener(this);
        layout.setOnClickListener(this);
        locationButton.setOnClickListener(this);
        specialText.setOnClickListener(this);
        confirmLocationButton.setOnClickListener(this);
    }


    @Override
    public void onClick(View view) {
        final Calendar myCalendar = Calendar.getInstance();

        if(view.getId() == layout.getId()){
            if (isMapDisplayed){
                displayGoogleMap(0);
            }
        }

        if (view.getId() == appointmentDateText.getId()){
            if (isMapDisplayed){
                displayGoogleMap(0);
            }
            else {
                final DatePickerDialog.OnDateSetListener appointment_date_listener = new DatePickerDialog.OnDateSetListener() {

                    @Override
                    public void onDateSet(DatePicker view, int year, int monthOfYear,
                                          int dayOfMonth) {
                        // TODO Auto-generated method stub
                        myCalendar.set(Calendar.YEAR, year);
                        myCalendar.set(Calendar.MONTH, monthOfYear);
                        myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                        String myFormat = "dd/MM/yyyy"; //In which you need put here
                        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
                        appointment_date = sdf.format(myCalendar.getTime());
                        appointmentDateText.setText(appointment_date);
                    }

                };
                new DatePickerDialog(DoctorVisit.this, appointment_date_listener, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH)).show();
            }
        }

        else if (view.getId() == appointmentTimeText.getId()){
            if (isMapDisplayed){
                displayGoogleMap(0);
            }
            else {
                int hour = myCalendar.get(Calendar.HOUR_OF_DAY);
                int minute = myCalendar.get(Calendar.MINUTE);
                TimePickerDialog mTimePicker;
                mTimePicker = new TimePickerDialog(DoctorVisit.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                        appointment_time = selectedHour + ":" + selectedMinute;
                        appointmentTimeText.setText(appointment_time);
                    }
                }, hour, minute, true);//Yes 24 hour time
                mTimePicker.setTitle("Select Time");
                mTimePicker.show();
            }
        }

        else if(view.getId() == addButton.getId()){
            if (isMapDisplayed){
                displayGoogleMap(0);
            }
            else {
                Log.d(TAG, "Button clicked");
                condition = conditionText.getText().toString();
                specialnote = specialText.getText().toString();
                if(checkBox.isChecked()){
                    checked = true;
                }

                if (radioGroup.getCheckedRadioButtonId() == -1 && appointmentDateText.getText().toString().equals("") && appointmentTimeText.getText().toString().equals("") && conditionText.getText().toString().equals("")){
                    Toast.makeText(this, "You need to enter details to book appointment", Toast.LENGTH_SHORT).show();
                }
                else{
                    if (radioGroup.getCheckedRadioButtonId() == -1){
                        Toast.makeText(this, "Please select some symptom.\nIf your symptom is not mentioned, please choose other and write that sympton in condition field below", Toast.LENGTH_SHORT).show();
                    }
                    else if (appointmentDateText.getText().toString().equals("")){
                        Toast.makeText(this, "Please choose appointment date", Toast.LENGTH_SHORT).show();
                    }
                    else if (appointmentTimeText.getText().toString().equals("")){
                        Toast.makeText(this, "Please choose appointment time", Toast.LENGTH_SHORT).show();
                    }
                    else if (conditionText.getText().toString().equals("")){
                        Toast.makeText(this, "Please describe your condition", Toast.LENGTH_SHORT).show();
                    }
                    else{
    //                    Toast.makeText(this, "Symptom: "+checkedRadio+"\nCondition: "+condition+"\nDate: "+appointment_date+"\nTime: "+appointment_time+"\nSpecial note: "+specialnote+"\nReceive Email: "+checked, Toast.LENGTH_SHORT).show();
                        showProgressBar();
                        getAppointmentCount();
                    }

                }
            }
        }

        else if(view.getId() == locationButton.getId()){
            if(checkLocation()){
                displayGoogleMap(1);
            }
            else{
                askForGPS();
            }
        }

        else if(view.getId() == specialText.getId()){
            if (isMapDisplayed){
                displayGoogleMap(0);
            }
        }

        else if(view.getId() == confirmLocationButton.getId()){
            confirmLocationButton.setVisibility(View.INVISIBLE);
            displayGoogleMap(0);
        }

    }

    @Override
    public void onCheckedChanged(RadioGroup radioGroup, int checkedId) {
        RadioButton checkedRadioButton = (RadioButton)radioGroup.findViewById(checkedId);
        boolean isChecked = checkedRadioButton.isChecked();
        if (isChecked) {
            checkedRadio = checkedRadioButton.getText().toString();
        }
    }

    public void bookAppointment(){
        Log.d(TAG, "bookAppointment() called");
        final DatabaseReference reference = FirebaseDatabase.getInstance().getReference().child("appointments").child("doctor_visit").push();
        reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                reference.child("appointment_date").setValue(appointment_date);
                reference.child("appointment_time").setValue(appointment_time);
                reference.child("customer_id").setValue(Uid);
                new_appointment_id = reference.getKey() + " " + appointment_id;
                reference.child("appointment_id").setValue(new_appointment_id);
                Log.e(TAG, "Key: "+reference.getKey());
                reference.child("get_email").setValue(checked);
                reference.child("special_note").setValue(specialnote);
                reference.child("symptom").setValue(checkedRadio);
                reference.child("condition").setValue(condition).addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        hideProgressBar();
                        Toast.makeText(DoctorVisit.this, "Appointment booked", Toast.LENGTH_SHORT).show();
                        addAppointmentToParticularUser();
                    }
                });
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Toast.makeText(DoctorVisit.this, "Error.\n"+databaseError, Toast.LENGTH_SHORT).show();
            }
        });

    }

    public void getAppointmentCount(){
        final DatabaseReference countReference = FirebaseDatabase.getInstance().getReference().child("appointments").child("doctor_visit");
        countReference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                count = (int) dataSnapshot.getChildrenCount();
                Log.e(TAG, "There are "+ count +" Doctor Visit appointments already");
                if (count<10){
                    count += 1;
                    appointment_id = "htk-doc-00"+count;
                }
                else if (count>=10 && count<100){
                    count += 1;
                    appointment_id = "htk-doc-0"+count;
                }
                else{
                    count += 1;
                    appointment_id = "htk-doc-"+count;
                }
                Log.e(TAG, "Appointment ID: "+ appointment_id);
                bookAppointment();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
    }

    public void addAppointmentToParticularUser(){
        countUserAppointments();
    }

    public void countUserAppointments(){
        final DatabaseReference reference = FirebaseDatabase.getInstance().getReference().child("users").child(Uid).child("appointments");
        reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                appointments_count = (int) dataSnapshot.getChildrenCount();
                Log.e(TAG, "Appointment count: "+appointments_count);
                addAppointment();
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.d(TAG, "Error adding Appointment added to user: "+databaseError);
            }
        });
    }

    public void addAppointment(){
        final DatabaseReference reference = FirebaseDatabase.getInstance().getReference().child("users");
        reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                if(appointments_count == 1){
                    appointments_count = 1;
                }
                String email = dataSnapshot.child(Uid).child("email").getValue(String.class);


                Log.e(TAG, "New Appointment count: "+appointments_count);

                reference.child(Uid).child("appointments").child(String.valueOf(appointments_count)).setValue(new_appointment_id).addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Log.e(TAG, "Appointment added to user: "+Uid);
                    }
                });
                String subject = "HTK | " + TAG + "appointment booked";
                String body = "Dear customer,\nYour appointment has been booked.\nAppointment details:\n1. Type: "+TAG+"\n2. Date: "+appointment_date+"\n3. Time: "+appointment_time+"\n4. Customer ID: "+customer_id;
//                sendEmailNew(email, subject, body);
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.e(TAG, "Error adding Appointment added to user: "+databaseError);
            }
        });
    }

    private void hideProgressBar(){
        progressBar.setVisibility(View.INVISIBLE);
    }

    private void showProgressBar(){
        progressBar.setVisibility(View.VISIBLE);
    }

    @Override
    public void onLocationChanged(Location location) {
        latitude = location.getLatitude();
        longitude = location.getLongitude();
        Log.d(TAG, "onLocationChanged() triggered");
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mGoogleMap = googleMap;
        Log.d(TAG, "Google Map Type: "+googleMap.getMapType());
        mGoogleMap.setMyLocationEnabled(true);
    }

    LocationCallback mLocationCallback = new LocationCallback() {
        @Override
        public void onLocationResult(LocationResult locationResult) {
            Log.e(TAG, "Inside onLocationResult()");
            List<Location> locationList = locationResult.getLocations();
            if (locationList.size() > 0) {
                Log.e(TAG, "Locationlist size is greater than 0");
                //The last location in the list is the newest
                Location location = locationList.get(locationList.size() - 1);
                Log.e(TAG, "Location: " + location.getLatitude() + " " + location.getLongitude());
                mLastLocation = location;
                if (mCurrLocationMarker != null) {
                    mCurrLocationMarker.remove();
                }

                //Place current location marker
                LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
                MarkerOptions markerOptions = new MarkerOptions();
                markerOptions.position(latLng);
                markerOptions.title("Current Position");
                markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA));
                mCurrLocationMarker = mGoogleMap.addMarker(markerOptions);

                //move map camera
                Toast.makeText(DoctorVisit.this, "Location is: "+location.getLongitude(), Toast.LENGTH_SHORT).show();
                mGoogleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 11));
            }
        }
    };

    @Override
    public void onPause() {
        super.onPause();

        Log.e(TAG, "onPause() triggered");
        //stop location updates when Activity is no longer active
        if (mFusedLocationClient != null) {
            mFusedLocationClient.removeLocationUpdates(mLocationCallback);
        }
    }

    public void displayGoogleMap(int visibility){
        if(visibility == 0){
            isMapDisplayed = false;
            mapFrag.getView().setVisibility(View.INVISIBLE);
        }
        else{
            isMapDisplayed = true;
            mapFrag.getView().setVisibility(View.VISIBLE);
            confirmLocationButton.setVisibility(View.VISIBLE);
            createLocationRequest();
        }
    }

    public boolean checkLocation() {
        final LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            return false;
        }
        else{
            return true;
        }
    }

    private void askForGPS() {
        final AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage("Your GPS seems to be disabled, do you want to enable it?")
                .setCancelable(false)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    public void onClick(final DialogInterface dialog, final int id) {
                        startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                        displayGoogleMap(1);
                    }
                })
                .setNegativeButton("No", new DialogInterface.OnClickListener() {
                    public void onClick(final DialogInterface dialog, final int id) {
                        dialog.cancel();
                    }
                });
        final AlertDialog alert = builder.create();
        alert.show();
    }

    private static LocationRequest createLocationRequest() {
        LocationRequest mLocationRequest = new LocationRequest();
        mLocationRequest.setInterval(200000);
        mLocationRequest.setFastestInterval(300000);
        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        return mLocationRequest;
    }

}

